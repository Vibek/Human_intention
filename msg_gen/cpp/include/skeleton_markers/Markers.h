/* Auto-generated by genmsg_cpp for file /home/vibek/skeleton_markers/msg/Markers.msg */
#ifndef SKELETON_MARKERS_MESSAGE_MARKERS_H
#define SKELETON_MARKERS_MESSAGE_MARKERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace skeleton_markers
{
template <class ContainerAllocator>
struct Markers_ {
  typedef Markers_<ContainerAllocator> Type;

  Markers_()
  : header()
  , num_markers(0)
  , id()
  , bearing()
  , range()
  {
  }

  Markers_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , num_markers(0)
  , id(_alloc)
  , bearing(_alloc)
  , range(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _num_markers_type;
  uint32_t num_markers;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  id;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bearing_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  bearing;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _range_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  range;


  typedef boost::shared_ptr< ::skeleton_markers::Markers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_markers::Markers_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Markers
typedef  ::skeleton_markers::Markers_<std::allocator<void> > Markers;

typedef boost::shared_ptr< ::skeleton_markers::Markers> MarkersPtr;
typedef boost::shared_ptr< ::skeleton_markers::Markers const> MarkersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::skeleton_markers::Markers_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::skeleton_markers::Markers_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace skeleton_markers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::Markers_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::skeleton_markers::Markers_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::skeleton_markers::Markers_<ContainerAllocator> > {
  static const char* value() 
  {
    return "93a15a847a8f3280084de76a9003df30";
  }

  static const char* value(const  ::skeleton_markers::Markers_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x93a15a847a8f3280ULL;
  static const uint64_t static_value2 = 0x084de76a9003df30ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_markers::Markers_<ContainerAllocator> > {
  static const char* value() 
  {
    return "skeleton_markers/Markers";
  }

  static const char* value(const  ::skeleton_markers::Markers_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::skeleton_markers::Markers_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# List of Markers detected by a sensor\n\
#\n\
\n\
Header header            # timestamp in the header is the acquisition time\n\
uint32 num_markers       # Number of detected markers\n\
int32[] id               # Detected marker id (-1 if id not detected)\n\
float64[] bearing        # Angle to the marker\n\
float64[] range          # range to the marker\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::skeleton_markers::Markers_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::skeleton_markers::Markers_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::skeleton_markers::Markers_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::skeleton_markers::Markers_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.num_markers);
    stream.next(m.id);
    stream.next(m.bearing);
    stream.next(m.range);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Markers_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_markers::Markers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::skeleton_markers::Markers_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_markers: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_markers);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "bearing[]" << std::endl;
    for (size_t i = 0; i < v.bearing.size(); ++i)
    {
      s << indent << "  bearing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bearing[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.range[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SKELETON_MARKERS_MESSAGE_MARKERS_H

