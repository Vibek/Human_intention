"""autogenerated by genpy from skeleton_markers/IrTransformMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class IrTransformMsg(genpy.Message):
  _md5sum = "9319a70063b3ea6eb78d10cf010af817"
  _type = "skeleton_markers/IrTransformMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool s1
bool s2
bool s3
bool s4
geometry_msgs/PointStamped p1
geometry_msgs/PointStamped p2
geometry_msgs/PointStamped p3
geometry_msgs/PointStamped p4

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['s1','s2','s3','s4','p1','p2','p3','p4']
  _slot_types = ['bool','bool','bool','bool','geometry_msgs/PointStamped','geometry_msgs/PointStamped','geometry_msgs/PointStamped','geometry_msgs/PointStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       s1,s2,s3,s4,p1,p2,p3,p4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IrTransformMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.s1 is None:
        self.s1 = False
      if self.s2 is None:
        self.s2 = False
      if self.s3 is None:
        self.s3 = False
      if self.s4 is None:
        self.s4 = False
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.PointStamped()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.PointStamped()
      if self.p3 is None:
        self.p3 = geometry_msgs.msg.PointStamped()
      if self.p4 is None:
        self.p4 = geometry_msgs.msg.PointStamped()
    else:
      self.s1 = False
      self.s2 = False
      self.s3 = False
      self.s4 = False
      self.p1 = geometry_msgs.msg.PointStamped()
      self.p2 = geometry_msgs.msg.PointStamped()
      self.p3 = geometry_msgs.msg.PointStamped()
      self.p4 = geometry_msgs.msg.PointStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B3I.pack(_x.s1, _x.s2, _x.s3, _x.s4, _x.p1.header.seq, _x.p1.header.stamp.secs, _x.p1.header.stamp.nsecs))
      _x = self.p1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p1.point.x, _x.p1.point.y, _x.p1.point.z, _x.p2.header.seq, _x.p2.header.stamp.secs, _x.p2.header.stamp.nsecs))
      _x = self.p2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p2.point.x, _x.p2.point.y, _x.p2.point.z, _x.p3.header.seq, _x.p3.header.stamp.secs, _x.p3.header.stamp.nsecs))
      _x = self.p3.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p3.point.x, _x.p3.point.y, _x.p3.point.z, _x.p4.header.seq, _x.p4.header.stamp.secs, _x.p4.header.stamp.nsecs))
      _x = self.p4.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.p4.point.x, _x.p4.point.y, _x.p4.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.PointStamped()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.PointStamped()
      if self.p3 is None:
        self.p3 = geometry_msgs.msg.PointStamped()
      if self.p4 is None:
        self.p4 = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.s1, _x.s2, _x.s3, _x.s4, _x.p1.header.seq, _x.p1.header.stamp.secs, _x.p1.header.stamp.nsecs,) = _struct_4B3I.unpack(str[start:end])
      self.s1 = bool(self.s1)
      self.s2 = bool(self.s2)
      self.s3 = bool(self.s3)
      self.s4 = bool(self.s4)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p1.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p1.point.x, _x.p1.point.y, _x.p1.point.z, _x.p2.header.seq, _x.p2.header.stamp.secs, _x.p2.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p2.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p2.point.x, _x.p2.point.y, _x.p2.point.z, _x.p3.header.seq, _x.p3.header.stamp.secs, _x.p3.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p3.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p3.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p3.point.x, _x.p3.point.y, _x.p3.point.z, _x.p4.header.seq, _x.p4.header.stamp.secs, _x.p4.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p4.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p4.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.p4.point.x, _x.p4.point.y, _x.p4.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B3I.pack(_x.s1, _x.s2, _x.s3, _x.s4, _x.p1.header.seq, _x.p1.header.stamp.secs, _x.p1.header.stamp.nsecs))
      _x = self.p1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p1.point.x, _x.p1.point.y, _x.p1.point.z, _x.p2.header.seq, _x.p2.header.stamp.secs, _x.p2.header.stamp.nsecs))
      _x = self.p2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p2.point.x, _x.p2.point.y, _x.p2.point.z, _x.p3.header.seq, _x.p3.header.stamp.secs, _x.p3.header.stamp.nsecs))
      _x = self.p3.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.p3.point.x, _x.p3.point.y, _x.p3.point.z, _x.p4.header.seq, _x.p4.header.stamp.secs, _x.p4.header.stamp.nsecs))
      _x = self.p4.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.p4.point.x, _x.p4.point.y, _x.p4.point.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.PointStamped()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.PointStamped()
      if self.p3 is None:
        self.p3 = geometry_msgs.msg.PointStamped()
      if self.p4 is None:
        self.p4 = geometry_msgs.msg.PointStamped()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.s1, _x.s2, _x.s3, _x.s4, _x.p1.header.seq, _x.p1.header.stamp.secs, _x.p1.header.stamp.nsecs,) = _struct_4B3I.unpack(str[start:end])
      self.s1 = bool(self.s1)
      self.s2 = bool(self.s2)
      self.s3 = bool(self.s3)
      self.s4 = bool(self.s4)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p1.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p1.point.x, _x.p1.point.y, _x.p1.point.z, _x.p2.header.seq, _x.p2.header.stamp.secs, _x.p2.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p2.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p2.point.x, _x.p2.point.y, _x.p2.point.z, _x.p3.header.seq, _x.p3.header.stamp.secs, _x.p3.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p3.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p3.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.p3.point.x, _x.p3.point.y, _x.p3.point.z, _x.p4.header.seq, _x.p4.header.stamp.secs, _x.p4.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.p4.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.p4.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.p4.point.x, _x.p4.point.y, _x.p4.point.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d3I = struct.Struct("<3d3I")
_struct_4B3I = struct.Struct("<4B3I")
_struct_3d = struct.Struct("<3d")
