//=================================================================================================
// Copyright (c) 2014, Vibekananda Dutta, WUT
// Faculty of Power and Aeronautical Engineering (MEiL)/ZTMiR Laboratory
// All rights reserved.
//=================================================================================================

#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <stdio.h>
#include <fstream>

using namespace std;
#define PI 3.14159265

int main(int argc, char** argv){
	
	ros::init(argc, argv, "my_tf_listener");
	ros::NodeHandle node;
	tf::TransformListener listener;

	ros::Rate rate(10.0);

	vector<double> right_hand_x;
	vector<double> right_hand_y;
	vector<double> right_hand_z;

	vector<double> left_hand_x;
	vector<double> left_hand_y;
	vector<double> left_hand_z;

	vector<double> head_x;
	vector<double> head_y;
	vector<double> head_z;
      
        vector<double> neck_x;
	vector<double> neck_y;
	vector<double> neck_z;
  
        vector<double> torso_x;
	vector<double> torso_y;
	vector<double> torso_z;
  
        vector<double> left_shoulder_x;
	vector<double> left_shoulder_y;
	vector<double> left_shoulder_z;
  
        vector<double> left_elbow_x;
	vector<double> left_elbow_y;
	vector<double> left_elbow_z;

        vector<double> right_shoulder_x;
	vector<double> right_shoulder_y;
	vector<double> right_shoulder_z;
  
        vector<double> right_elbow_x;
	vector<double> right_elbow_y;
	vector<double> right_elbow_z;
  
  
  
    double right_x = 0;  
    double right_y = 0;
    double right_z = 0;

    double left_x = 0;  
    double left_y = 0;
    double left_z = 0;

    double head1_x = 0;  
    double head1_y = 0;
    double head1_z = 0;

    double neck1_x = 0;  
    double neck1_y = 0;
    double neck1_z = 0;
  
    double torso1_x = 0;  
    double torso1_y = 0;
    double torso1_z = 0;

    double leftsh_x = 0;  
    double leftsh_y = 0;
    double leftsh_z = 0;
  
    double leftel_x = 0;  
    double leftel_y = 0;
    double leftel_z = 0;

    double rightsh_x = 0;  
    double rightsh_y = 0;
    double rightsh_z = 0;

    double rightel_x = 0;  
    double rightel_y = 0;
    double rightel_z = 0;

	while (node.ok()){
		tf::StampedTransform transform1;
		tf::StampedTransform transform2;
                //tf::StampedTransform transform3; 

		try{
			
// ---------- FOR THE RIGHT HAND ---------------------------------------------------------------
			
			listener.lookupTransform("/left_elbow_1", "/left_hand_1", ros::Time(0), transform1);

			double right_x_tmp = transform1.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double right_y_tmp = transform1.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double right_z_tmp = transform1.getOrigin().z();
			
			// the difference between current and previous position 
			double right_x_diff = right_x_tmp - right_x;
			double right_y_diff = right_y_tmp - right_y;
			double right_z_diff = right_z_tmp - right_z;

			right_x = right_x_tmp;  
			right_y = right_y_tmp;
			right_z = right_z_tmp;

			//putting the values in vector to save

			right_hand_x.push_back(right_x_diff);
			right_hand_y.push_back(right_y_diff);
			right_hand_z.push_back(right_z_diff);
			
			cout <<"RIGHT HAND VALUE PUSHED INTO VECTOR" <<endl;

// --------------------- FOR THE LEFT HAND ------------------------------------------------------			
			
			listener.lookupTransform("/left_elbow_1", "/left_hand_1", ros::Time(0), transform1);
			
			double left_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double left_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double left_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double left_x_diff = left_x_tmp - left_x;
			double left_y_diff = left_y_tmp - left_y;
			double left_z_diff = left_z_tmp - left_z;

			left_x = left_x_tmp;  
			left_y = left_y_tmp;
			left_z = left_z_tmp;

//putting the values in vector to save

			left_hand_x.push_back(left_x_diff);
			left_hand_y.push_back(left_y_diff);
			left_hand_z.push_back(left_z_diff);
                       cout <<"LEFT HAND VALUE PUSHED INTO VECTOR" <<endl;

// --------------------- FOR THE HEAD ------------------------------------------------------			
			
			listener.lookupTransform("/neck_1", "/head_1", ros::Time(0), transform1);
			
			double head_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double head_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double head_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double head_x_diff = head_x_tmp - head1_x;
			double head_y_diff = head_y_tmp - head1_y;
			double head_z_diff = head_z_tmp - head1_z;

			head1_x = head_x_tmp;  
			head1_y = head_y_tmp;
			head1_z = head_z_tmp;

//putting the values in vector to save

			head_x.push_back(head_x_diff);
			head_y.push_back(head_y_diff);
			head_z.push_back(head_z_diff);


			cout <<"HEAD VALUE PUSHED INTO VECTOR" <<endl;

 // --------------------- FOR THE NECK ------------------------------------------------------ 
              listener.lookupTransform("/head_1", "/neck_1", ros::Time(0), transform1);
			
			double neck_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double neck_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double neck_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double neck_x_diff = neck_x_tmp - neck1_x;
			double neck_y_diff = neck_y_tmp - neck1_y;
			double neck_z_diff = neck_z_tmp - neck1_z;

			neck1_x = neck_x_tmp;  
			neck1_y = neck_y_tmp;
			neck1_z = neck_z_tmp;

//putting the values in vector to save

			neck_x.push_back(neck_x_diff);
			neck_y.push_back(neck_y_diff);
			neck_z.push_back(neck_z_diff);


			cout <<"NECK VALUE PUSHED INTO VECTOR" <<endl;
                                     
/*
	
     // --------------------- FOR THE LEFT ELBOW------------------------------------------------------ 
              listener.lookupTransform("/left_shoulde_1", "/left_elbow_1", ros::Time(0), transform2);
			
			double leftel_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double leftel_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double leftel_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double leftel_x_diff = leftel_x_tmp - leftel_x;
			double leftel_y_diff = leftel_y_tmp - leftel_y;
			double leftel_z_diff = leftel_z_tmp - leftel_z;

			leftel_x = head_x_tmp;  
			leftel_y = head_y_tmp;
			leftel_z = head_z_tmp;

//putting the values in vector to save

			left_elbow_x.push_back(leftel_x_diff);
			left_elbow_y.push_back(leftel_y_diff);
			left_elbow_z.push_back(leftel_z_diff);


			cout <<"LEFT ELBOW VALUE PUSHED INTO VECTOR" <<endl;
                                     

		
	 // --------------------- FOR THE RIGHT ELBOW ------------------------------------------------------ 
              listener.lookupTransform("/right_shoulde_1", "/right_elbow_1", ros::Time(0), transform1);
			
			double rightel_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double rightel_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double rightel_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double rightel_x_diff = rightel_x_tmp - rightel_x;
			double rightel_y_diff = rightel_y_tmp - rightel_y;
			double rightel_z_diff = rightel_z_tmp - rightel_z;

			rightel_x = rightel_x_tmp;  
			rightel_y = rightel_y_tmp;
			rightel_z = rightel_z_tmp;

//putting the values in vector to save

			right_elbow_x.push_back(rightel_x_diff);
			right_elbow_y.push_back(rightel_y_diff);
			right_elbow_z.push_back(rightel_z_diff);


			cout <<"RIGHT ELBOW VALUE PUSHED INTO VECTOR" <<endl;
                                     

		
	

 // --------------------- FOR THE LEFT SHOULDER ------------------------------------------------------ 
              listener.lookupTransform("/head_1", "/right_shoulder_1", ros::Time(0), transform2);
			
			double rightsh_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double rightsh_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double rightsh_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double rightsh_x_diff = rightel_x_tmp - rightel_x;
			double rightsh_y_diff = rightel_y_tmp - rightel_y;
			double rightsh_z_diff = rightel_z_tmp - rightel_z;

			rightsh_x = rightel_x_tmp;  
			rightsh_y = rightel_y_tmp;
			rightsh_z = rightel_z_tmp;

//putting the values in vector to save

			right_shoulder_x.push_back(rightel_x_diff);
			right_shoulder_y.push_back(rightel_y_diff);
			right_shoulder_z.push_back(rightel_z_diff);


			cout <<"LEFT SHOULDER VALUE PUSHED INTO VECTOR" <<endl;
                                     

	
 // --------------------- FOR THE RIGHT SHOULDER ------------------------------------------------------ 
              listener.lookupTransform("/head_1", "/neck_1", ros::Time(0), transform3);
			
			double leftsh_x_tmp = transform2.getOrigin().x();  // returns a position of the joint with respect to fixed frame 
			double leftsh_y_tmp = transform2.getOrigin().y();  // individual elements of position can be accessed by x,y,z
			double leftsh_z_tmp = transform2.getOrigin().z();

			// the difference between current and previous position 
			double leftsh_x_diff = leftsh_x_tmp - leftsh_x;
			double leftsh_y_diff = leftsh_y_tmp - leftsh_y;
			double leftsh_z_diff = leftsh_z_tmp - leftsh_z;

			leftsh_x = leftsh_x_tmp;  
			leftsh_y = leftsh_y_tmp;
			leftsh_z = leftsh_z_tmp;

//putting the values in vector to save

			right_shoulder_x.push_back(head_x_diff);
			right_shoulder_y.push_back(head_y_diff);
			right_shoulder_z.push_back(head_z_diff);


			cout <<"RIGHT SHOULDER VALUE PUSHED INTO VECTOR" <<endl;*/
                                     

		}
		catch (tf::TransformException ex){
			ROS_ERROR("%s",ex.what());
		}
		rate.sleep();
	}
	
    cout <<"ITERATOR STARTS NOW, PLEASE PAY ATTENTION"<<endl;
    ofstream x_file;
    vector<double>::iterator j = right_hand_y.begin();
    vector<double>::iterator k = right_hand_z.begin();
    vector<double>::iterator l = left_hand_x.begin();
    vector<double>::iterator m = left_hand_y.begin();
    vector<double>::iterator n = left_hand_z.begin();
    vector<double>::iterator o = head_x.begin();
    vector<double>::iterator p = head_y.begin();
    vector<double>::iterator q = head_z.begin();
    vector<double>::iterator r = neck_x.begin();
    vector<double>::iterator s = neck_y.begin();
    vector<double>::iterator t = neck_z.begin();
   /* vector<double>::iterator u = left_elbow_x.begin();
    vector<double>::iterator v = left_elbow_y.begin();
    vector<double>::iterator w = left_elbow_z.begin();
    vector<double>::iterator a = right_elbow_x.begin();
    vector<double>::iterator b = right_elbow_y.begin();
    vector<double>::iterator c = right_elbow_z.begin();
    vector<double>::iterator d = left_shoulder_x.begin();
    vector<double>::iterator e = left_shoulder_y.begin();
    vector<double>::iterator f = left_shoulder_z.begin();
    vector<double>::iterator g = right_shoulder_x.begin();
    vector<double>::iterator h = right_shoulder_y.begin();
    vector<double>::iterator ii = right_shoulder_z.begin();*/

    x_file.open ("JointPositionData.csv", ios_base::trunc); //the flag ios::app makes sure that the control starts at the end of already existing file.
		
    x_file <<"LEFT_HAND.x"<< " , "<< "LEFT_HAND.y"<<"," <<"LEFT_HAND.z" << "RIGHT_HAND.x"<<","<< "RIGHT_HAND.y"<<","<< "RIGHT_HAND.z"<<","<< "HEAD.x"<<","<< "HEAD.y"<<","<< "HEAD.z"<<","<< "NECK.x"<<","<< "NECK.y"<<","<< "NECK.z"/*<<","<< "LEFT_ELBW.x"<<","<< "LEFT_ELBW.y"<<","<< "LEFT_ELBW.z"<<","<< "RIGHT_ELBW.x"<<","<< "RIGHT_ELBW.y"<<","<< "RIGHT_ELBW.z"<<","<< "LEFT_SHLD.x"<<","<< "LEFT_SHLD.y"<<","<< "LEFT_SHLD.z"<<","<< "RIGHT_SHLD.x"<<","<< "RIGHT_SHLD.y"<<","<< "RIGHT_SHLD.z"*/<<std::endl;
             // x_file <<"--------------------"<<"  "<< " "<<"--------------------"<<"\n"<<endl;
    

       for (vector<double>::iterator i = right_hand_x.begin(); i != right_hand_x.end();++i){
           
        x_file << *i <<",";}
 for (vector<double>::iterator j = right_hand_x.begin(); j != right_hand_x.end();++j){
       x_file   << *j <<"," ;}
 for (vector<double>::iterator k = right_hand_x.begin(); k != right_hand_x.end();++k){
   x_file  << *k <<","; }
 for (vector<double>::iterator l = right_hand_x.begin(); l != right_hand_x.end();++l){ 
    x_file << *l <<  ",";}
  for (vector<double>::iterator m = right_hand_x.begin(); m != right_hand_x.end();++m){
   x_file << *m << ","; }
 for (vector<double>::iterator n = right_hand_x.begin(); n != right_hand_x.end();++n){
    x_file << *n << ","; }
 for (vector<double>::iterator o = right_hand_x.begin(); o != right_hand_x.end();++o){
    x_file << *o << "," ; }
 for (vector<double>::iterator p = right_hand_x.begin(); p != right_hand_x.end();++p){
  x_file << *p << ","; }
 for (vector<double>::iterator q = right_hand_x.begin(); q != right_hand_x.end();++q){
   x_file << *q << ","; }
 for (vector<double>::iterator r = right_hand_x.begin(); r != right_hand_x.end();++r){
   x_file << *r << ","; }
 for (vector<double>::iterator s = right_hand_x.begin(); s != right_hand_x.end();++s){
   x_file << *s << ","; }
 for (vector<double>::iterator t = right_hand_x.begin(); t != right_hand_x.end();++t){
   x_file << *t << std::endl;
       
                                 
    }
      
 x_file.close();

	return 0;
};
