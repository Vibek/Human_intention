/* Auto-generated by genmsg_cpp for file /home/vibek/Human_intention/msg/EnableJointGroup.msg */
#ifndef HUMAN_INTENTION_MESSAGE_ENABLEJOINTGROUP_H
#define HUMAN_INTENTION_MESSAGE_ENABLEJOINTGROUP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Human_intention
{
template <class ContainerAllocator>
struct EnableJointGroup_ {
  typedef EnableJointGroup_<ContainerAllocator> Type;

  EnableJointGroup_()
  : jointGroups()
  , enabledStates()
  {
  }

  EnableJointGroup_(const ContainerAllocator& _alloc)
  : jointGroups(_alloc)
  , enabledStates(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _jointGroups_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  jointGroups;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _enabledStates_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  enabledStates;


  typedef boost::shared_ptr< ::Human_intention::EnableJointGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Human_intention::EnableJointGroup_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EnableJointGroup
typedef  ::Human_intention::EnableJointGroup_<std::allocator<void> > EnableJointGroup;

typedef boost::shared_ptr< ::Human_intention::EnableJointGroup> EnableJointGroupPtr;
typedef boost::shared_ptr< ::Human_intention::EnableJointGroup const> EnableJointGroupConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Human_intention::EnableJointGroup_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Human_intention::EnableJointGroup_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Human_intention

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Human_intention::EnableJointGroup_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Human_intention::EnableJointGroup_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Human_intention::EnableJointGroup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "816ee069696c3513a51b0f478a453767";
  }

  static const char* value(const  ::Human_intention::EnableJointGroup_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x816ee069696c3513ULL;
  static const uint64_t static_value2 = 0xa51b0f478a453767ULL;
};

template<class ContainerAllocator>
struct DataType< ::Human_intention::EnableJointGroup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Human_intention/EnableJointGroup";
  }

  static const char* value(const  ::Human_intention::EnableJointGroup_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Human_intention::EnableJointGroup_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] jointGroups\n\
bool[] enabledStates\n\
\n\
";
  }

  static const char* value(const  ::Human_intention::EnableJointGroup_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Human_intention::EnableJointGroup_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jointGroups);
    stream.next(m.enabledStates);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EnableJointGroup_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Human_intention::EnableJointGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Human_intention::EnableJointGroup_<ContainerAllocator> & v) 
  {
    s << indent << "jointGroups[]" << std::endl;
    for (size_t i = 0; i < v.jointGroups.size(); ++i)
    {
      s << indent << "  jointGroups[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.jointGroups[i]);
    }
    s << indent << "enabledStates[]" << std::endl;
    for (size_t i = 0; i < v.enabledStates.size(); ++i)
    {
      s << indent << "  enabledStates[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.enabledStates[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUMAN_INTENTION_MESSAGE_ENABLEJOINTGROUP_H

